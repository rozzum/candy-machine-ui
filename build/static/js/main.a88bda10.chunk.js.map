{"version":3,"sources":["img/nft_image.gif","components/isMobile.ts","components/Info/index.ts","components/Info/Info.tsx","components/Countdown/index.ts","components/Countdown/CountDown.tsx","components/InactiveMintButton/index.ts","components/InactiveMintButton/InactiveMintButton.tsx","components/styled.tsx","components/ProgressBar/index.ts","components/ProgressBar/ProgressBar.tsx","components/MintButton/MintButton.tsx","components/MintButton/index.ts","constants.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["isMobile","userAgent","navigator","vendor","window","opera","test","MSStream","innerWidth","Info","props","theme","useTheme","mobileMarker","Paper","style","width","display","flexDirection","backgroundColor","palette","primary","light","marginTop","marginBottom","padding","justifyContent","alignItems","Typography","variant","color","fontFamily","fontWeight","textAlign","type","contrastText","marginLeft","amount","CountDown","days","hours","minutes","seconds","className","elevation","marginRight","InactiveMintButton","CTAButton","styled","Button","onClick","alert","MainContainer","div","WalletContainer","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","FullWidthConnectButton","BorderLinearProgress","LinearProgress","ProgressBar","paddingTop","redeemed","available","value","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","console","log","disabled","state","a","gatekeeper","CircularProgress","goLiveDate","startDate","Date","startWlDate","cluster","process","toString","decimals","REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS","splTokenName","REACT_APP_SPL_TOKEN_TO_MINT_NAME","MintPage","balance","setBalance","setIsMinting","setIsActive","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","refreshFlag","setRefreshFlag","open","message","severity","undefined","alertState","setAlertState","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","wallet","useWallet","setCandyMachine","rpcUrl","rpcHost","anchorWallet","useMemo","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","connection","Connection","candyMachineId","getCandyMachineState","cndy","tempItems","divider","Array","join","slice","tokenMint","toNumber","LAMPORTS_PER_SOL","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","mint","getTokenAccountBalance","tokenBalance","uiAmount","error","endSettings","endSettingType","date","toDate","number","getTime","limit","Math","min","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","expireOnUse","Error","hideDuration","startsWith","displaySuccess","mintPublicKey","qty","remaining","throwConfetti","confetti","particleCount","spread","origin","y","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","status","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","setupState","anchor","Keypair","generate","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","msg","code","indexOf","getBalance","timer1","setInterval","clearInterval","dark","overflowX","height","minHeight","toLocaleString","Container","maxWidth","paddingLeft","paddingRight","paddingBottom","main","innerHeight","Grid","container","spacing","item","xs","md","sm","lg","src","nft_image","alt","borderRadius","boxShadow","onMount","completed","onComplete","renderer","PublicKey","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","require","e","getCandyMachineId","network","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","Promise","resolve","reject","setTimeout","getSignatureStatuses","signatureStatuses","sleep","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","id","authority","isWhitelistOnly","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","find","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","all","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.a88bda10.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nft_image.576655a0.gif\";","\r\n\r\nconst isMobile = () => {\r\n    //@ts-ignore\r\n    const  userAgent = navigator.userAgent || navigator.vendor || window.opera;\r\n\r\n\r\n    if (/android/i.test(userAgent)) {\r\n        return true;\r\n    }\r\n\r\n    //@ts-ignore\r\n    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\r\n        return true;\r\n    }\r\n\r\n    if (window.innerWidth < 530) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport default isMobile","import {Info} from \"./Info\"\r\n\r\nexport default Info","import React from 'react';\r\nimport {Paper, Typography, useTheme} from \"@mui/material\";\r\nimport isMobile from \"../isMobile\";\r\n\r\n\r\n\r\ninterface Price {\r\n    type: string,\r\n    amount: string | number\r\n}\r\n\r\nexport const Info = (props: Price) => {\r\n    const theme = useTheme()\r\n    const mobileMarker = isMobile()\r\n\r\n\r\n    return (\r\n                <Paper style={{\r\n                    width: '100%',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    backgroundColor: theme.palette.primary.light,\r\n                    marginTop: mobileMarker ? '0.5rem': 0,\r\n                    marginBottom: mobileMarker ? '0.5rem': 0,\r\n                }}>\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'row',\r\n                        padding: 10,\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <Typography display=\"inline\" variant=\"h6\" style={{\r\n                            color: '#fff',\r\n                            fontFamily: 'Main',\r\n                            fontWeight: 'bold',\r\n                            textAlign: 'center',\r\n\r\n                        }}>\r\n                            {props.type}\r\n                            <Typography display=\"inline\" variant=\"h6\" style={{\r\n                                color: theme.palette.primary.contrastText,\r\n                                fontFamily: 'Main',\r\n                                fontWeight: 'bold',\r\n                                textAlign: 'center',\r\n                                marginLeft: 5,\r\n                            }}>\r\n                                {props.amount}\r\n                            </Typography>\r\n                        </Typography>\r\n\r\n                    </div>\r\n                </Paper>\r\n\r\n    );\r\n};\r\n","import {CountDown} from \"./CountDown\"\r\n\r\nexport default CountDown","import React from \"react\";\r\nimport {Typography, Paper, useTheme} from \"@mui/material\";\r\nimport \"./count_down.css\"\r\nimport isMobile from \"../isMobile\";\r\n\r\nexport const CountDown = ({days, hours, minutes, seconds}: any) => {\r\n    const theme = useTheme()\r\n    const mobileMarker = isMobile()\r\n\r\n    return (\r\n        <div className=\"countDown-container\" style={{\r\n            marginTop: mobileMarker ? '1rem' : 0,\r\n            marginBottom: mobileMarker ? '1rem' : 0\r\n        }}>\r\n            <Paper elevation={0} className=\"item-container\"\r\n                   style={{\r\n                       backgroundColor: theme.palette.primary.light,\r\n                       marginRight: window.innerWidth > 480 ? '1rem' : '1rem',\r\n                       textAlign: 'center'\r\n                   }}>\r\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\r\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}>\r\n                    {days < 10 ? `0${days}` : days}\r\n                </Typography>\r\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\r\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\r\n                }}>days</Typography>\r\n            </Paper>\r\n            <Paper elevation={0} className=\"item-container\"\r\n                   style={{\r\n                       backgroundColor: theme.palette.primary.light,\r\n                       marginRight: window.innerWidth > 480 ? '1rem' : '1rem'\r\n                   }}>\r\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\r\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}>\r\n                    {hours < 10 ? `0${hours}` : hours}\r\n                </Typography>\r\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\r\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\r\n                }}>hrs</Typography>\r\n            </Paper>\r\n            <Paper elevation={0} className=\"item-container\"\r\n                   style={{\r\n                       backgroundColor: theme.palette.primary.light,\r\n                       marginRight: window.innerWidth > 480 ? '1rem' : '1rem'\r\n                   }}>\r\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\r\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}>\r\n                    {minutes < 10 ? `0${minutes}` : minutes}\r\n                </Typography>\r\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\r\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\r\n                }}> mins </Typography>\r\n            </Paper>\r\n            <Paper elevation={0} className=\"item-container\" style={{backgroundColor: theme.palette.primary.light,}}>\r\n                <Typography variant={window.innerWidth > 530 ? 'h4' : 'h5'}\r\n                            style={{fontFamily: 'Main', color: '#fff', fontWeight: 'bold'}}\r\n                >\r\n                    {seconds < 10 ? `0${seconds}` : seconds}\r\n                </Typography>\r\n                <Typography variant={window.innerWidth > 530 ? 'h5' : 'h6'} style={{\r\n                    color: theme.palette.primary.contrastText, fontFamily: 'Main'\r\n                }}> secs</Typography>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n","import {InactiveMintButton} from \"./InactiveMintButton\";\r\n\r\nexport default InactiveMintButton","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Button} from \"@mui/material\";\r\nimport isMobile from \"../isMobile\";\r\n\r\nexport const InactiveMintButton = () => {\r\n    const CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: #616A6B !important;\r\n  min-width: 120px !important;\r\n  width: 100%;\r\n  font-size: 1em !important;\r\n  color: #fff !important;\r\n  font-family: Main !important;\r\n  font-weight: bold !important;\r\n`;\r\n\r\n    const alertMessage = \"Mint is not live yet!\"\r\n\r\n    return (\r\n            <CTAButton variant=\"contained\" onClick={() => alert(alertMessage)}>\r\n                Mint\r\n            </CTAButton>\r\n\r\n    );\r\n};\r\n","import styled from \"styled-components\";\r\nimport {LinearProgress, Paper} from \"@mui/material\";\r\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\r\n\r\n\r\nexport const MainContainer = styled.div`\r\n      display: flex;\r\n      flex-direction: column;\r\n      margin-top: 20px;\r\n      margin-bottom: 20px;\r\n      text-align: center;\r\n      justify-content: center;\r\n    `;\r\n\r\nexport const WalletContainer = styled.div`\r\n  position: absolute; \r\n  top: 0.5rem;\r\n  right: 0.5rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const WalletAmount = styled.div`\r\n  color: #fff;\r\n  width: auto;\r\n  padding: 5px 5px 5px 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 22px;\r\n  background-color: var(--light-background-color);\r\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: 0;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: flex-start;\r\n  gap: 10px;\r\n`;\r\n\r\nexport const Wallet = styled.ul`\r\n  flex: 0 0 auto;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const ConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 18px !important;\r\n  padding: 6px 16px;\r\n  background-color: #4E44CE;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const FullWidthConnectButton = styled(WalletMultiButton)`\r\n  border-radius: 10px !important;\r\n  padding: 6px 16px;\r\n  background-color: #4E44CE;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\n\r\nexport const BorderLinearProgress = styled(LinearProgress)`\r\n  margin: 15px;\r\n  height: 10px !important;\r\n  border-radius: 30px;\r\n  color: var(--title-text-color);\r\n  border: 2px solid white;\r\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\r\n  background-color: #fff !important;\r\n  \r\n .MuiLinearProgress-barColorPrimary{\r\n    background-color:var(--title-text-color) !important;\r\n  }\r\n  \r\n  .MuiLinearProgress-barColorPrimary{\r\n    background-color:var(--title-text-color) !important;\r\n  }\r\n\r\n  > div.MuiLinearProgress-bar1Determinate {\r\n    border-radius: 30px !important;\r\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\r\n  }\r\n`;\r\n\r\n\r\n","import {ProgressBar} from \"./ProgressBar\";\r\n\r\nexport default ProgressBar","import React from 'react';\r\nimport {BorderLinearProgress} from \"../styled\";\r\nimport {Paper, useTheme, Typography} from \"@mui/material\";\r\nimport isMobile from \"../isMobile\";\r\n\r\ninterface Progress {\r\n    redeemed: number,\r\n    available: number\r\n}\r\n\r\nexport const ProgressBar = (props: Progress) => {\r\n    const theme = useTheme()\r\n    const mobileMarker = isMobile()\r\n\r\n    return (\r\n        <Paper style={{\r\n            backgroundColor: theme.palette.primary.light,\r\n            paddingTop: 5,\r\n            marginTop: mobileMarker ? '0.5rem' : 0,\r\n            marginBottom: mobileMarker ? '1rem' : 0,\r\n        }}>\r\n            <Typography display=\"inline\" variant=\"h5\" style={{\r\n                color: '#fff',\r\n                fontFamily: 'Main',\r\n                fontWeight: 'bold',\r\n                textAlign: 'center',\r\n\r\n            }}>\r\n                Minted\r\n            <Typography display=\"inline\" variant=\"h5\" style={{\r\n                color: theme.palette.primary.contrastText,\r\n                fontFamily: 'Main',\r\n                fontWeight: 'bold',\r\n                textAlign: 'center',\r\n                marginLeft: 5\r\n            }}>\r\n                {props.redeemed} / {props.available}</Typography>\r\n            </Typography>\r\n            <BorderLinearProgress\r\n                style={{\r\n                    width: '95%',\r\n                    marginRight: 0,\r\n                    marginLeft: '2%',\r\n                }}\r\n                variant=\"determinate\"\r\n                value={100 - ((props.available - props.redeemed) * 100 / props.available)}/>\r\n        </Paper>\r\n    );\r\n};\r\n\r\n","import styled from 'styled-components';\r\nimport {useEffect, useState} from 'react';\r\nimport {Button, CircularProgress} from '@mui/material';\r\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\r\nimport {CandyMachineAccount} from '../../candy-machine';\r\n\r\n\r\nconst CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  min-width: 120px !important;\r\n  width: 100%;\r\n  font-size: 1em !important;\r\n  font-family: Main !important;\r\n  font-weight: bold !important;\r\n  color: #fff !important;\r\n`;\r\n\r\nexport const MintButton = ({\r\n                               onMint,\r\n                               candyMachine,\r\n                               isMinting,\r\n                               isEnded,\r\n                               isActive,\r\n                               isSoldOut\r\n                           }: {\r\n    onMint: () => Promise<void>;\r\n    candyMachine?: CandyMachineAccount;\r\n    isMinting: boolean;\r\n    isEnded: boolean;\r\n    isActive: boolean;\r\n    isSoldOut: boolean;\r\n}) => {\r\n    const {requestGatewayToken, gatewayStatus} = useGateway();\r\n    const [clicked, setClicked] = useState(false);\r\n    const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsVerifying(false);\r\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\r\n            // when user approves wallet verification txn\r\n            setIsVerifying(true);\r\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n            console.log('Verified human, now minting...');\r\n            onMint();\r\n            setClicked(false);\r\n        }\r\n    }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n    return (\r\n        <CTAButton\r\n            disabled={\r\n                clicked ||\r\n                candyMachine?.state.isSoldOut ||\r\n                isSoldOut ||\r\n                isMinting ||\r\n                isEnded ||\r\n                !isActive ||\r\n                isVerifying\r\n            }\r\n            onClick={async () => {\r\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\r\n                    console.log('Requesting gateway token');\r\n                    setClicked(true);\r\n                    await requestGatewayToken();\r\n                } else {\r\n                    console.log('Minting...');\r\n                    await onMint();\r\n                }\r\n            }}\r\n            variant=\"contained\"\r\n        >\r\n            {!candyMachine ? (\r\n                \"CONNECTING...\"\r\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n                'SOLD OUT'\r\n            ) : isActive ? (\r\n                isVerifying ? 'VERIFYING...' :\r\n                    isMinting || clicked ? (\r\n                        <CircularProgress/>\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\r\n                \"SOON\"\r\n            ) : (\r\n                \"UNAVAILABLE\"\r\n            ))}\r\n        </CTAButton>\r\n    );\r\n};\r\n","import {MintButton} from \"./MintButton\";\r\n\r\nexport default MintButton","\r\n\r\nexport const startDate = new Date(\"19 May 2022 17:00:00 GMT\")\r\nexport const startWlDate = new Date(\"19 May 2022 16:00:00 GMT\")\r\n\r\nexport const mintPrice = '0.1 SOL'\r\nexport const supply = 10","import {useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport Countdown from \"react-countdown\";\r\nimport {Snackbar, Alert, Paper, Grid, useTheme, Container, Typography} from \"@mui/material\";\r\n\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n    Commitment,\r\n    Connection,\r\n    PublicKey,\r\n    Transaction,\r\n    LAMPORTS_PER_SOL\r\n} from \"@solana/web3.js\";\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {useWallet} from \"@solana/wallet-adapter-react\";\r\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\r\nimport {GatewayProvider} from '@civic/solana-gateway-react';\r\n\r\nimport {AlertState, getAtaForMint, toDate} from './utils';\r\nimport {\r\n    awaitTransactionSignatureConfirmation,\r\n    CANDY_MACHINE_PROGRAM,\r\n    CandyMachineAccount,\r\n    createAccountsForMint,\r\n    getCandyMachineState,\r\n    getCollectionPDA,\r\n    mintOneToken,\r\n    SetupState,\r\n} from \"./candy-machine\";\r\n\r\n\r\n\r\nimport nft_image from \"./img/nft_image.gif\"\r\n\r\n\r\nimport Info from \"./components/Info\";\r\nimport CountDown from \"./components/Countdown\";\r\nimport InactiveMintButton from \"./components/InactiveMintButton\";\r\nimport ProgressBar from \"./components/ProgressBar\";\r\nimport MintButton from './components/MintButton';\r\n\r\nimport './Home.css'\r\nimport {MainContainer,\r\n    ConnectButton,\r\n    FullWidthConnectButton,\r\n    Wallet,\r\n    WalletAmount,\r\n    WalletContainer,\r\n} from \"./components/styled\";\r\n\r\nimport isMobile from \"./components/isMobile\"\r\nimport {startDate, startWlDate, mintPrice, supply} from \"./constants\";\r\n\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\r\n\r\n\r\nexport interface HomeProps {\r\n    candyMachineId?: anchor.web3.PublicKey;\r\n    connection: anchor.web3.Connection;\r\n    txTimeout: number;\r\n    rpcHost: string;\r\n    network: WalletAdapterNetwork;\r\n}\r\n\r\nexport const MintPage = (props: HomeProps) => {\r\n    const [balance, setBalance] = useState<number>();\r\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n    const [itemsAvailable, setItemsAvailable] = useState(0);\r\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n    const [itemsRemaining, setItemsRemaining] = useState(0);\r\n    const [isSoldOut, setIsSoldOut] = useState(false);\r\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n    const [price, setPrice] = useState(0);\r\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n    const [isBurnToken, setIsBurnToken] = useState(false);\r\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n    const [isEnded, setIsEnded] = useState(false);\r\n    const [endDate, setEndDate] = useState<Date>();\r\n    const [isPresale, setIsPresale] = useState(false);\r\n    const [isWLOnly, setIsWLOnly] = useState(false);\r\n    const [refreshFlag, setRefreshFlag] = useState(false)\r\n\r\n    const [alertState, setAlertState] = useState<AlertState>({\r\n        open: false,\r\n        message: \"\",\r\n        severity: undefined,\r\n    });\r\n\r\n    const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n    const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n    const wallet = useWallet();\r\n    const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n\r\n    const rpcUrl = props.rpcHost;\r\n    const solFeesEstimation = 0.012; // approx of account creation fees\r\n\r\n    const anchorWallet = useMemo(() => {\r\n        if (\r\n            !wallet ||\r\n            !wallet.publicKey ||\r\n            !wallet.signAllTransactions ||\r\n            !wallet.signTransaction\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            publicKey: wallet.publicKey,\r\n            signAllTransactions: wallet.signAllTransactions,\r\n            signTransaction: wallet.signTransaction,\r\n        } as anchor.Wallet;\r\n    }, [wallet]);\r\n\r\n    const refreshCandyMachineState = useCallback(\r\n        async (commitment: Commitment = 'confirmed') => {\r\n            if (!anchorWallet) {\r\n                return;\r\n            }\r\n\r\n            const connection = new Connection(props.rpcHost, commitment);\r\n\r\n            if (props.candyMachineId) {\r\n                try {\r\n                    const cndy = await getCandyMachineState(\r\n                        anchorWallet,\r\n                        props.candyMachineId,\r\n                        connection,\r\n                    );\r\n\r\n                    setCandyMachine(cndy);\r\n                    setItemsAvailable(cndy.state.itemsAvailable);\r\n                    setItemsRemaining(cndy.state.itemsRemaining);\r\n                    let tempItems = itemsRedeemed\r\n                    setItemsRedeemed(cndy.state.itemsRedeemed >= tempItems ? cndy.state.itemsRedeemed : tempItems);\r\n                   \r\n\r\n                    var divider = 1;\r\n                    if (decimals) {\r\n                        divider = +('1' + new Array(decimals).join('0').slice() + '0');\r\n                    }\r\n\r\n                    // detect if using spl-token to mint\r\n                    if (cndy.state.tokenMint) {\r\n                        setPayWithSplToken(true);\r\n                        // Customize your SPL-TOKEN Label HERE\r\n                        // TODO: get spl-token metadata name\r\n                        setPriceLabel(splTokenName);\r\n                        setPrice(cndy.state.price.toNumber() / divider);\r\n                        setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n                    } else {\r\n                        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n                        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n                    }\r\n\r\n\r\n                    // fetch whitelist token balance\r\n                    if (cndy.state.whitelistMintSettings) {\r\n                        setWhitelistEnabled(true);\r\n                        setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\r\n                        setIsPresale(cndy.state.whitelistMintSettings.presale);\r\n                        setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\r\n\r\n                        if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\r\n                            if (cndy.state.tokenMint) {\r\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\r\n                            } else {\r\n                                setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\r\n                            }\r\n                        }\r\n\r\n                        let balance = 0;\r\n                        try {\r\n                            const tokenBalance =\r\n                                await props.connection.getTokenAccountBalance(\r\n                                    (\r\n                                        await getAtaForMint(\r\n                                            cndy.state.whitelistMintSettings.mint,\r\n                                            anchorWallet.publicKey,\r\n                                        )\r\n                                    )[0],\r\n                                );\r\n\r\n                            balance = tokenBalance?.value?.uiAmount || 0;\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                            balance = 0;\r\n                        }\r\n                        if (commitment !== \"processed\") {\r\n                            setWhitelistTokenBalance(balance);\r\n                        }\r\n                        setIsActive(isPresale && !isEnded && balance > 0);\r\n\r\n                    } else {\r\n                        setWhitelistEnabled(false);\r\n                    }\r\n\r\n                    // end the mint when date is reached\r\n                    if (cndy?.state.endSettings?.endSettingType.date) {\r\n                        setEndDate(toDate(cndy.state.endSettings.number));\r\n                        if (\r\n                            cndy.state.endSettings.number.toNumber() <\r\n                            new Date().getTime() / 1000\r\n                        ) {\r\n                            setIsEnded(true);\r\n                            setIsActive(false);\r\n                        }\r\n                    }\r\n                    // end the mint when amount is reached\r\n                    if (cndy?.state.endSettings?.endSettingType.amount) {\r\n                        let limit = Math.min(\r\n                            cndy.state.endSettings.number.toNumber(),\r\n                            cndy.state.itemsAvailable,\r\n                        );\r\n                        setItemsAvailable(limit);\r\n                        if (cndy.state.itemsRedeemed < limit) {\r\n                            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n                        } else {\r\n                            setItemsRemaining(0);\r\n                            cndy.state.isSoldOut = true;\r\n                            setIsEnded(true);\r\n                        }\r\n                    } else {\r\n                        setItemsRemaining(cndy.state.itemsRemaining);\r\n                    }\r\n\r\n                    if (cndy.state.isSoldOut) {\r\n                        setIsActive(false);\r\n                    }\r\n\r\n                    const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n                    const collectionPDAAccount = await connection.getAccountInfo(\r\n                        collectionPDA,\r\n                    );\r\n\r\n                    const txnEstimate =\r\n                        892 +\r\n                        (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n                        (cndy.state.tokenMint ? 66 : 0) +\r\n                        (cndy.state.whitelistMintSettings ? 34 : 0) +\r\n                        (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\r\n                        (cndy.state.gatekeeper ? 33 : 0) +\r\n                        (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n                    setNeedTxnSplit(txnEstimate > 1230);\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        if (\r\n                            e.message === `Account does not exist ${props.candyMachineId}`\r\n                        ) {\r\n                            setAlertState({\r\n                                open: true,\r\n                                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n                                severity: 'error',\r\n                                hideDuration: null,\r\n                            });\r\n                        } else if (\r\n                            e.message.startsWith('failed to get info about account')\r\n                        ) {\r\n                            setAlertState({\r\n                                open: true,\r\n                                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n                                severity: 'error',\r\n                                hideDuration: null,\r\n                            });\r\n                        }\r\n                    } else {\r\n                        setAlertState({\r\n                            open: true,\r\n                            message: `${e}`,\r\n                            severity: 'error',\r\n                            hideDuration: null,\r\n                        });\r\n                    }\r\n                    console.log(e);\r\n                }\r\n            } else {\r\n                setAlertState({\r\n                    open: true,\r\n                    message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n                    severity: 'error',\r\n                    hideDuration: null,\r\n                });\r\n            }\r\n        },\r\n        [anchorWallet, props.candyMachineId, props.rpcHost, isEnded, isPresale, props.connection],\r\n    );\r\n\r\n\r\n    function displaySuccess(mintPublicKey: any, qty: number = 1): void {\r\n        let remaining = itemsRemaining - qty;\r\n        setItemsRemaining(remaining);\r\n        setIsSoldOut(remaining === 0);\r\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n            let balance = whitelistTokenBalance - qty;\r\n            setWhitelistTokenBalance(balance);\r\n            setIsActive(isPresale && !isEnded && balance > 0);\r\n        }\r\n        setSetupTxn(undefined);\r\n        setItemsRedeemed(itemsRedeemed + qty);\r\n        if (!payWithSplToken && balance && balance > 0) {\r\n            setBalance(balance - ((whitelistEnabled ? whitelistPrice : price) * qty) - solFeesEstimation);\r\n        }\r\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\r\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\r\n            : (\"https://solscan.io/token/\" + mintPublicKey));\r\n        setIsMinting(false);\r\n        throwConfetti();\r\n    };\r\n\r\n    function throwConfetti(): void {\r\n        confetti({\r\n            particleCount: 400,\r\n            spread: 70,\r\n            origin: {y: 0.6},\r\n        });\r\n    }\r\n\r\n    const onMint = async (\r\n        beforeTransactions: Transaction[] = [],\r\n        afterTransactions: Transaction[] = [],\r\n    ) => {\r\n        try {\r\n            if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n                setIsMinting(true);\r\n                let setupMint: SetupState | undefined;\r\n                if (needTxnSplit && setupTxn === undefined) {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message: 'Please validate account setup transaction',\r\n                        severity: 'info',\r\n                    });\r\n                    setupMint = await createAccountsForMint(\r\n                        candyMachine,\r\n                        wallet.publicKey,\r\n                    );\r\n                    let status: any = {err: true};\r\n                    if (setupMint.transaction) {\r\n                        status = await awaitTransactionSignatureConfirmation(\r\n                            setupMint.transaction,\r\n                            props.txTimeout,\r\n                            props.connection,\r\n                            true,\r\n                        );\r\n                    }\r\n                    if (status && !status.err) {\r\n                        setSetupTxn(setupMint);\r\n                        setAlertState({\r\n                            open: true,\r\n                            message:\r\n                                'Setup transaction succeeded! You can now validate mint transaction',\r\n                            severity: 'info',\r\n                        });\r\n                    } else {\r\n                        setAlertState({\r\n                            open: true,\r\n                            message: 'Mint failed! Please try again!',\r\n                            severity: 'error',\r\n                        });\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                const setupState = setupMint ?? setupTxn;\r\n                const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n                let mintResult = await mintOneToken(\r\n                    candyMachine,\r\n                    wallet.publicKey,\r\n                    mint,\r\n                    beforeTransactions,\r\n                    afterTransactions,\r\n                    setupState,\r\n                );\r\n\r\n                let status: any = {err: true};\r\n                let metadataStatus = null;\r\n                if (mintResult) {\r\n                    status = await awaitTransactionSignatureConfirmation(\r\n                        mintResult.mintTxId,\r\n                        props.txTimeout,\r\n                        props.connection,\r\n                        true,\r\n                    );\r\n\r\n                    metadataStatus =\r\n                        await candyMachine.program.provider.connection.getAccountInfo(\r\n                            mintResult.metadataKey,\r\n                            'processed',\r\n                        );\r\n                    console.log('Metadata status: ', !!metadataStatus);\r\n                }\r\n\r\n                if (status && !status.err && metadataStatus) {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message: 'Congratulations! Mint succeeded!',\r\n                        severity: 'success',\r\n                    });\r\n\r\n                    // update front-end amounts\r\n                    displaySuccess(mint.publicKey);\r\n                    refreshCandyMachineState('processed');\r\n                } else if (status && !status.err) {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message:\r\n                            'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\r\n                        severity: 'error',\r\n                        hideDuration: 8000,\r\n                    });\r\n                    refreshCandyMachineState();\r\n                } else {\r\n                    setAlertState({\r\n                        open: true,\r\n                        message: 'Mint failed! Please try again!',\r\n                        severity: 'error',\r\n                    });\r\n                    refreshCandyMachineState();\r\n                }\r\n            }\r\n        } catch (error: any) {\r\n            let message = error.msg || 'Minting failed! Please try again!';\r\n            if (!error.msg) {\r\n                if (!error.message) {\r\n                    message = 'Transaction Timeout! Please try again.';\r\n                } else if (error.message.indexOf('0x138')) {\r\n                } else if (error.message.indexOf('0x137')) {\r\n                    message = `SOLD OUT!`;\r\n                } else if (error.message.indexOf('0x135')) {\r\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\r\n                }\r\n            } else {\r\n                if (error.code === 311) {\r\n                    message = `SOLD OUT!`;\r\n                } else if (error.code === 312) {\r\n                    message = `Minting period hasn't started yet.`;\r\n                }\r\n            }\r\n\r\n            setAlertState({\r\n                open: true,\r\n                message,\r\n                severity: \"error\",\r\n            });\r\n        } finally {\r\n            setIsMinting(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (anchorWallet) {\r\n                const balance = await props.connection.getBalance(anchorWallet!.publicKey);\r\n                setBalance(balance / LAMPORTS_PER_SOL);\r\n            }\r\n        })();\r\n    }, [anchorWallet, props.connection]);\r\n\r\n    useEffect(() => {\r\n        refreshCandyMachineState();\r\n    }, [\r\n        anchorWallet,\r\n        props.candyMachineId,\r\n        props.connection,\r\n        isEnded,\r\n        isPresale,\r\n        refreshCandyMachineState,\r\n        refreshFlag\r\n    ]);\r\n\r\n    useEffect(\r\n        () => {\r\n            let timer1 = setInterval(() => setRefreshFlag(!refreshFlag), 5000);\r\n            return () => {\r\n                clearInterval(timer1);\r\n            };\r\n        },\r\n        [refreshFlag]\r\n    );\r\n\r\n\r\n    const mobileMarker = isMobile()\r\n    const theme = useTheme()\r\n\r\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\r\n        return <CountDown days={days} hours={hours} minutes={minutes} seconds={seconds}/>\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <main style={{\r\n            backgroundColor: theme.palette.primary.dark,\r\n            width: window.innerWidth > 530 ? '100%' : window.innerWidth * 0.99,\r\n            overflowX: 'hidden',\r\n            height: '100%',\r\n            minHeight: '100vh',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n        }}>\r\n            <MainContainer style={{\r\n                marginTop: 50,\r\n            }}>\r\n\r\n\r\n                <WalletContainer>\r\n                    <Wallet>\r\n                        {\r\n                           wallet ?\r\n                                   <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\r\n                                   <ConnectButton>Connect Wallet</ConnectButton>\r\n                        }\r\n\r\n                    </Wallet>\r\n                </WalletContainer>\r\n\r\n\r\n\r\n\r\n                {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) &&\r\n                <Typography variant={mobileMarker ? \"h4\" : 'h3'} style={{\r\n                    color: '#fff',\r\n                    fontFamily: 'Main',\r\n                    fontWeight: 'bold',\r\n                    marginBottom: 10\r\n                }}>You are whitelisted!</Typography>}\r\n\r\n                <Container maxWidth=\"md\">\r\n                    <Paper style={{\r\n                        paddingTop: '1rem',\r\n                        paddingLeft: '1rem',\r\n                        paddingRight: 0,\r\n                        paddingBottom: '1rem',\r\n                        backgroundColor: theme.palette.primary.main,\r\n                        width: '90%',\r\n                        marginLeft: mobileMarker ? '2.5%' : '5%',\r\n                        minHeight: mobileMarker ? window.innerHeight * 0.75 : 'auto'\r\n                    }}>\r\n                        <Grid container spacing={2} style={{\r\n                            width: '100%',\r\n\r\n                        }}>\r\n                            <Grid item xs={12} md={6} sm={6} lg={6}>\r\n                                <img src={nft_image} alt=\"loading...\"\r\n                                     style={{width: '100%', borderRadius: 10,\r\n                                         boxShadow: \"rgba(0, 0, 0, 0.24) 0px 3px 8px\"}}/>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={6} sm={6} lg={6} style={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                justifyContent: 'space-between',\r\n                                paddingBottom: mobileMarker ? 0 : '0.3rem',\r\n                                height: mobileMarker ? '100%' : 'auto'\r\n                            }}>\r\n                                <Typography variant=\"h4\" style={{\r\n                                    color: '#fff',\r\n                                    fontFamily: 'Main',\r\n                                    fontWeight: 'bold',\r\n                                }}>\r\n                                    CATs from STREET\r\n                                </Typography>\r\n\r\n                                        <Info type=\"price\" amount={price ? isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel) : mintPrice}/>\r\n                                <Info type=\"Supply\" amount={itemsAvailable ? itemsAvailable : supply}/>\r\n\r\n                                        {wallet && isActive &&\r\n                                        (whitelistEnabled && (whitelistTokenBalance > 0) ? new Date() > startWlDate : new Date() > startDate) ?\r\n                                            <ProgressBar available={itemsAvailable} redeemed={itemsRedeemed} /> : <Countdown\r\n                                            date={ whitelistEnabled && (whitelistTokenBalance > 0) ? startWlDate : startDate}\r\n                                            onMount={({completed}) => completed && setIsActive(!isEnded)}\r\n                                            onComplete={() => {\r\n                                                setIsActive(!isEnded);\r\n                                            }}\r\n                                            renderer={renderGoLiveDateCounter}\r\n                                        />\r\n                                        }\r\n\r\n                                            {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) || (whitelistEnabled && (whitelistTokenBalance > 0) ? new Date() < startWlDate : new Date() < startDate) ? <InactiveMintButton /> : (\r\n                                                !wallet ? (\r\n                                                    <FullWidthConnectButton>Connect Wallet</FullWidthConnectButton>\r\n                                                ) : (!isWLOnly || whitelistTokenBalance > 0) ?\r\n                                                    candyMachine?.state.gatekeeper &&\r\n                                                    wallet.publicKey &&\r\n                                                    wallet.signTransaction ? (\r\n                                                        <GatewayProvider\r\n                                                            wallet={{\r\n                                                                publicKey:\r\n                                                                    wallet.publicKey ||\r\n                                                                    new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                                                                //@ts-ignore\r\n                                                                signTransaction: wallet.signTransaction,\r\n                                                            }}\r\n                                                            clusterUrl={rpcUrl}\r\n                                                            options={{autoShowModal: false}}\r\n                                                        >\r\n                                                            <MintButton\r\n                                                                candyMachine={candyMachine}\r\n                                                                isMinting={isMinting}\r\n                                                                isActive={isActive}\r\n                                                                isEnded={isEnded}\r\n                                                                isSoldOut={isSoldOut}\r\n                                                                onMint={onMint}\r\n                                                            />\r\n                                                        </GatewayProvider>\r\n                                                    ) : (\r\n                                                        <MintButton\r\n                                                            candyMachine={candyMachine}\r\n                                                            isMinting={isMinting}\r\n                                                            isActive={isActive}\r\n                                                            isEnded={isEnded}\r\n                                                            isSoldOut={isSoldOut}\r\n                                                            onMint={onMint}\r\n                                                        />\r\n                                                    ) :\r\n                                                    <h1>Mint is private.</h1>\r\n                                            )}\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                    </Paper>\r\n                </Container>\r\n\r\n            </MainContainer>\r\n\r\n            <Snackbar\r\n                open={alertState.open}\r\n                autoHideDuration={6000}\r\n                onClose={() => setAlertState({...alertState, open: false})}\r\n            >\r\n                <Alert\r\n                    onClose={() => setAlertState({...alertState, open: false})}\r\n                    severity={alertState.severity}\r\n                >\r\n                    {alertState.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </main>\r\n    );\r\n};\r\n\r\n\r\n","import { useMemo } from \"react\";\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolflareWebWallet,\r\n    getSolletWallet,\r\n    getSolletExtensionWallet,\r\n    getSolongWallet,\r\n    getLedgerWallet,\r\n    getSafePalWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n    WalletModalProvider\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport \"./App.css\";\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport {MintPage} from \"./Home\";\r\n\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n    try {\r\n        const candyMachineId = new anchor.web3.PublicKey(\r\n            process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n        );\r\n\r\n        return candyMachineId;\r\n    } catch (e) {\r\n        console.log('Failed to construct CandyMachineId', e);\r\n        return undefined;\r\n    }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n    rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst App = () => {\r\n    // Custom RPC endpoint.\r\n    const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\r\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\r\n    // of wallets that your users connect to will be loaded.\r\n    const wallets = useMemo(\r\n        () => [\r\n            getPhantomWallet(),\r\n            getSlopeWallet(),\r\n            getSolflareWallet(),\r\n            getSolflareWebWallet(),\r\n            getSolletWallet({ network }),\r\n            getSolletExtensionWallet({ network }),\r\n            getSolongWallet(),\r\n            getLedgerWallet(),\r\n            getSafePalWallet(),\r\n        ],\r\n        []\r\n    );\r\n\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets} autoConnect={true}>\r\n                <WalletModalProvider>\r\n                    <MintPage\r\n                        candyMachineId={candyMachineId}\r\n                        connection={connection}\r\n                        txTimeout={DEFAULT_TIMEOUT}\r\n                        rpcHost={rpcHost}\r\n                        network={network}\r\n                    />\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createTheme, ThemeProvider } from \"@mui/material\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#2e3d4d',\r\n            main: '#131a21',\r\n            dark: '#0a0e11',\r\n            contrastText: '#ff00b2'\r\n        },\r\n\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <ThemeProvider theme={theme}>\r\n   <App />\r\n      </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n  hideDuration?: number | null;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n    new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n    'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n    mint: anchor.web3.PublicKey,\r\n    buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n    gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n      CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n    wallet: anchor.web3.PublicKey,\r\n    gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        wallet.toBuffer(),\r\n        Buffer.from('gateway'),\r\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n        gatekeeperNetwork.toBuffer(),\r\n      ],\r\n      CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n    'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: null | anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n    txid: anchor.web3.TransactionSignature,\r\n    timeout: number,\r\n    connection: anchor.web3.Connection,\r\n    queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n    anchorWallet: anchor.Wallet,\r\n    candyMachineId: anchor.web3.PublicKey,\r\n    connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'processed',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n    mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n          [\r\n            Buffer.from('metadata'),\r\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n            mint.toBuffer(),\r\n            Buffer.from('edition'),\r\n          ],\r\n          TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n    mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n          [\r\n            Buffer.from('metadata'),\r\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n            mint.toBuffer(),\r\n          ],\r\n          TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n    candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n      CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n    candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n      [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n      CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n    mint: anchor.web3.PublicKey,\r\n    newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n      await anchor.web3.PublicKey.findProgramAddress(\r\n          [\r\n            Buffer.from('metadata'),\r\n            TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n            mint.toBuffer(),\r\n            Buffer.from('collection_authority'),\r\n            newAuthority.toBuffer(),\r\n          ],\r\n          TOKEN_METADATA_PROGRAM_ID,\r\n      )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n    candyMachine: CandyMachineAccount,\r\n    payer: anchor.web3.PublicKey,\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n      await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span,\r\n          ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n        userTokenAccountAddress,\r\n        payer,\r\n        payer,\r\n        mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        userTokenAccountAddress,\r\n        payer,\r\n        [],\r\n        1,\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n        await sendTransactions(\r\n            candyMachine.program.provider.connection,\r\n            candyMachine.program.provider.wallet,\r\n            [instructions],\r\n            [signers],\r\n            SequenceType.StopOnFailure,\r\n            'singleGossip',\r\n            () => {},\r\n            () => false,\r\n            undefined,\r\n            [],\r\n            [],\r\n        )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\ntype MintResult = {\r\n  mintTxId: string;\r\n  metadataKey: anchor.web3.PublicKey;\r\n};\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachineAccount,\r\n    payer: anchor.web3.PublicKey,\r\n    mint: anchor.web3.Keypair,\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n    setupState?: SetupState,\r\n): Promise<MintResult | null> => {\r\n  const userTokenAccountAddress = (\r\n      await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n      ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n      : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log('SetupState: ', setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n        ...[\r\n          anchor.web3.SystemProgram.createAccount({\r\n            fromPubkey: payer,\r\n            newAccountPubkey: mint.publicKey,\r\n            space: MintLayout.span,\r\n            lamports:\r\n                await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n                    MintLayout.span,\r\n                ),\r\n            programId: TOKEN_PROGRAM_ID,\r\n          }),\r\n          Token.createInitMintInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              mint.publicKey,\r\n              0,\r\n              payer,\r\n              payer,\r\n          ),\r\n          createAssociatedTokenAccountInstruction(\r\n              userTokenAccountAddress,\r\n              payer,\r\n              payer,\r\n              mint.publicKey,\r\n          ),\r\n          Token.createMintToInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              mint.publicKey,\r\n              userTokenAccountAddress,\r\n              payer,\r\n              [],\r\n              1,\r\n          ),\r\n        ],\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n          await getNetworkToken(\r\n              payer,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n            await getNetworkExpire(\r\n                candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n        candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: payer,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: payer,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n      candyMachineAddress,\r\n  );\r\n\r\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n      await candyMachine.program.instruction.mintNft(creatorBump, {\r\n        accounts: {\r\n          candyMachine: candyMachineAddress,\r\n          candyMachineCreator,\r\n          payer: payer,\r\n          wallet: candyMachine.state.treasury,\r\n          mint: mint.publicKey,\r\n          metadata: metadataAddress,\r\n          masterEdition,\r\n          mintAuthority: payer,\r\n          updateAuthority: payer,\r\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: SystemProgram.programId,\r\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n          recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n          instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        },\r\n        remainingAccounts:\r\n            remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n      }),\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n      await candyMachine.program.provider.connection.getAccountInfo(\r\n          collectionPDA,\r\n      );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n          (await candyMachine.program.account.collectionPda.fetch(\r\n              collectionPDA,\r\n          )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n          collectionMint,\r\n          collectionPDA,\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log('Collection PDA: ', collectionPDA.toBase58());\r\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n            await candyMachine.program.instruction.setCollectionDuringMint({\r\n              accounts: {\r\n                candyMachine: candyMachineAddress,\r\n                metadata: metadataAddress,\r\n                payer: payer,\r\n                collectionPda: collectionPDA,\r\n                tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n                instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n                collectionMint,\r\n                collectionMetadata,\r\n                collectionMasterEdition,\r\n                authority: candyMachine.state.authority,\r\n                collectionAuthorityRecord,\r\n              },\r\n            }),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions];\r\n  const signersMatrix = [signers];\r\n\r\n  try {\r\n    const txns = (\r\n        await sendTransactions(\r\n            candyMachine.program.provider.connection,\r\n            candyMachine.program.provider.wallet,\r\n            instructionsMatrix,\r\n            signersMatrix,\r\n            SequenceType.StopOnFailure,\r\n            'singleGossip',\r\n            () => {},\r\n            () => false,\r\n            undefined,\r\n            beforeTransactions,\r\n            afterTransactions,\r\n        )\r\n    ).txs.map(t => t.txid);\r\n    const mintTxn = txns[0];\r\n    return {\r\n      mintTxId: mintTxn,\r\n      metadataKey: metadataAddress,\r\n    };\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n    connection: Connection,\r\n    txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[][],\r\n    signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n            connection,\r\n            wallet,\r\n            instructions[0],\r\n            filteredSigners[0],\r\n            'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n            connection,\r\n            wallet,\r\n            instructions,\r\n            filteredSigners,\r\n            SequenceType.StopOnFailure,\r\n            'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n        'Died on ',\r\n        stopPoint,\r\n        'retrying from instruction',\r\n        instructions[stopPoint],\r\n        'instructions length is',\r\n        instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructionSet: TransactionInstruction[][],\r\n    signersSet: Keypair[][],\r\n    sequenceType: SequenceType = SequenceType.Parallel,\r\n    commitment: Commitment = 'singleGossip',\r\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n      partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n      'Signed txns length',\r\n      signedTxns.length,\r\n      'vs handed in length',\r\n      instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n            successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[] | Transaction,\r\n    signers: Keypair[],\r\n    awaitConfirmation = true,\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (!Array.isArray(instructions)) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n        block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n          // fee payed by the wallet owner\r\n          wallet.publicKey,\r\n          ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        DEFAULT_TIMEOUT,\r\n        connection,\r\n        commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n                                              signedTransaction,\r\n                                              connection,\r\n                                              timeout = DEFAULT_TIMEOUT,\r\n                                            }: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'recent',\r\n        true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'recent',\r\n    queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              console.log('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              console.log('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}